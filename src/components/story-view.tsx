
"use client";
import { useState, useRef, useEffect } from "react";
import type { Story } from "@/lib/stories";
import { Button } from "./ui/button";
import { Volume2, LoaderCircle } from "lucide-react";
import { cn } from "@/lib/utils";

interface StoryViewProps {
  story: Story;
  onBack: () => void;
}

// A placeholder for the full story text. 
// In a real app, this would come from the `story` prop.
const storyText = `In the ancient kingdom of Kosala, nestled along the Sarayu river, the noble king Dasharatha ruled from the grand city of Ayodhya. His eldest son, Rama, was the epitome of dharmaâ€”righteous, compassionate, and unwavering in his duty. He was loved by all, a beacon of hope and virtue. His prowess with the bow was legendary, matched only by his wisdom. But fate, woven by the gods and the ambitions of mortals, had a different path for him than the throne of Ayodhya. Through the machinations of his stepmother, Queen Kaikeyi, Rama was exiled to the forest for fourteen years. His devoted wife, Sita, and his loyal brother, Lakshmana, refused to be parted from him, choosing to share his fate.`;


export function StoryView({ story, onBack }: StoryViewProps) {
  const [content, setContent] = useState(storyText);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [popup, setPopup] = useState<{ x: number, y: number, text: string } | null>(null);
  const [guruPopup, setGuruPopup] = useState<{ text: string } | null>(null);
  
  const storyContentRef = useRef<HTMLDivElement>(null);
  const wisdomIconRef = useRef<HTMLSpanElement>(null);

  // Cleanup speech synthesis on component unmount
  useEffect(() => {
    return () => {
      if (window.speechSynthesis.speaking) {
        window.speechSynthesis.cancel();
      }
    };
  }, []);

  // Close popups when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (popup && wisdomIconRef.current && !wisdomIconRef.current.contains(event.target as Node)) {
        setPopup(null);
      }
      if (guruPopup) {
        // This is a simple implementation. A real one might check if the click is inside the popup.
        setGuruPopup(null);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [popup, guruPopup]);

  const handleListen = () => {
    if (isSpeaking) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
      return;
    }
    const utterance = new SpeechSynthesisUtterance(storyContentRef.current?.innerText);
    utterance.lang = 'en-US';
    utterance.rate = 0.9;
    utterance.onstart = () => setIsSpeaking(true);
    utterance.onend = () => setIsSpeaking(false);
    utterance.onerror = () => setIsSpeaking(false);
    window.speechSynthesis.speak(utterance);
  };
  
  const handlePovClick = (character: string) => {
    setIsLoading(true);
    // Placeholder for AI call
    setTimeout(() => {
      setContent(`[Displaying the story from the perspective of ${character}... The full text will be generated by the RAG system here.]`);
      setIsLoading(false);
    }, 1000);
  };
  
  const handleTextSelection = () => {
    const selection = window.getSelection();
    if (selection && selection.toString().trim().length > 0) {
      const range = selection.getRangeAt(0);
      const rect = range.getBoundingClientRect();
      const containerRect = storyContentRef.current?.getBoundingClientRect();
      
      if(containerRect) {
         setPopup({
          x: rect.right - containerRect.left,
          y: rect.top - containerRect.top,
          text: selection.toString()
        });
      }
    } else {
      setPopup(null);
    }
  };
  
  const handleWisdomClick = () => {
    if (!popup) return;
    const selectedText = popup.text;
    setPopup(null);
    setGuruPopup({ text: `[Fetching philosophical insight for: '${selectedText}'... The full explanation will be generated by the RAG system here.]` });
  };
  
  const characters = ["Rama", "Sita", "Hanuman", "Dashratha", "Kaikeyi"];

  return (
    <div id="manuscript-page" className="w-full h-full bg-[#f5f5dc] text-[#1a1a1a] font-serif p-4 sm:p-8 flex gap-8">
      <style jsx>{`
        #manuscript-page {
          font-family: Georgia, serif;
        }
        .pov-button {
          width: 60px;
          height: 60px;
          border-radius: 50%;
          border: 2px solid #553B28;
          background-color: #E6DBC9;
          transition: all 0.2s ease-in-out;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 0.75rem;
          text-align: center;
          cursor: pointer;
        }
        .pov-button:hover {
          background-color: #D2B48C;
          transform: scale(1.1);
        }
        .guru-popup {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background-color: #FAF8F2;
          border: 1px solid #DDC9A7;
          box-shadow: 0 4px 12px rgba(0,0,0,0.15);
          padding: 2rem;
          z-index: 100;
          max-width: 500px;
          border-radius: 0.5rem;
        }
        .wisdom-icon {
            position: absolute;
            cursor: pointer;
            font-size: 1.5rem;
            line-height: 1;
            user-select: none;
            z-index: 50;
        }
      `}</style>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        <header className="flex justify-between items-center pb-4 border-b-2 border-[#553B28]/20">
          <h1 className="text-2xl sm:text-4xl font-headline text-primary">Ramayana: The God Who Struggled</h1>
          <Button
            id="listen-button"
            onClick={handleListen}
            variant="ghost"
            className="text-lg text-primary hover:bg-primary/10"
          >
            {isSpeaking ? 'Stop' : 'Listen'} <Volume2 className="ml-2" />
          </Button>
        </header>

        <div 
          id="story-content"
          ref={storyContentRef}
          onMouseUp={handleTextSelection}
          className="prose-lg max-w-none flex-1 overflow-y-auto p-4 relative"
        >
          {isLoading ? (
            <div className="flex items-center justify-center h-full">
                <LoaderCircle className="animate-spin text-primary" size={48} />
            </div>
          ) : (
             <p className="text-justify leading-relaxed">{content}</p>
          )}

          {popup && (
            <span
              ref={wisdomIconRef}
              className="wisdom-icon"
              style={{ left: `${popup.x}px`, top: `${popup.y}px` }}
              onClick={handleWisdomClick}
              title="Get Guru's Commentary"
            >
              ðŸª·
            </span>
          )}
        </div>
      </div>

      {/* Right POV Panel */}
      <aside id="pov-panel" className="flex flex-col items-center gap-4 py-4 px-2 bg-[#E6DBC9]/50 rounded-lg border border-[#DDC9A7]">
        <h3 className="font-headline text-sm text-primary/80 mb-2">Point of View</h3>
        {characters.map((char) => (
          <button
            key={char}
            className="pov-button"
            data-character={char}
            onClick={() => handlePovClick(char)}
          >
            {char}
          </button>
        ))}
      </aside>

      {/* Guru Popup */}
      {guruPopup && (
        <div id="guru-popup" className="guru-popup">
            <p>{guruPopup.text}</p>
             <Button variant="outline" size="sm" onClick={() => setGuruPopup(null)} className="mt-4">Close</Button>
        </div>
      )}
    </div>
  );
}
